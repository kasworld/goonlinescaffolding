// Code generated by "genprotocol -ver=ee0c2a9542c23df14c7723030f3c8ad53da871d9e014d150b2e62d1ce8399fde -basedir=. -prefix=gos -statstype=int"

package gos_error

import "fmt"

type ErrorCode uint16 // use in packet header, DO NOT CHANGE
const (
	None             ErrorCode = iota //
	ActionProhibited                  //
	ObjectNotFound                    //
	ActionCanceled                    //

	ErrorCode_Count int = iota
)

var _ErrorCode2string = [ErrorCode_Count][2]string{
	None:             {"None", ""},
	ActionProhibited: {"ActionProhibited", ""},
	ObjectNotFound:   {"ObjectNotFound", ""},
	ActionCanceled:   {"ActionCanceled", ""},
}

func (e ErrorCode) String() string {
	if e >= 0 && e < ErrorCode(ErrorCode_Count) {
		return _ErrorCode2string[e][0]
	}
	return fmt.Sprintf("ErrorCode%d", uint16(e))
}
func (e ErrorCode) CommentString() string {
	if e >= 0 && e < ErrorCode(ErrorCode_Count) {
		return _ErrorCode2string[e][1]
	}
	return ""
}

// implement error interface
func (e ErrorCode) Error() string {
	return "gos_error." + e.String()
}

var _string2ErrorCode = map[string]ErrorCode{
	"None":             None,
	"ActionProhibited": ActionProhibited,
	"ObjectNotFound":   ObjectNotFound,
	"ActionCanceled":   ActionCanceled,
}

func String2ErrorCode(s string) (ErrorCode, bool) {
	v, b := _string2ErrorCode[s]
	return v, b
}
