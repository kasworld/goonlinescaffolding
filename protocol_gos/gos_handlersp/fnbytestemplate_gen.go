// Code generated by "genprotocol -ver=68269c8bfeecd6e461aa862d64007f60a1aeccd64229d523ae7b99a446255112 -basedir=. -prefix=gos -statstype=int"

package gos_handlersp

/* bytes base demux fn map template

var DemuxRsp2BytesFnMap = [...]func(me interface{}, hd gos_packet.Header, rbody []byte) error {
gos_idcmd.Invalid : bytesRecvRspFn_Invalid,
gos_idcmd.Login : bytesRecvRspFn_Login,
gos_idcmd.Heartbeat : bytesRecvRspFn_Heartbeat,
gos_idcmd.MakeStage : bytesRecvRspFn_MakeStage,
gos_idcmd.EnterStage : bytesRecvRspFn_EnterStage,
gos_idcmd.ChatToStage : bytesRecvRspFn_ChatToStage,
gos_idcmd.LeaveStage : bytesRecvRspFn_LeaveStage,

}

	func bytesRecvRspFn_Invalid(me interface{}, hd gos_packet.Header, rbody []byte) error {
		robj, err := gos_json.UnmarshalPacket(hd, rbody)
		if err != nil {
			return  fmt.Errorf("Packet type miss match %v", rbody)
		}
		recved , ok := robj.(*gos_obj.RspInvalid_data)
		if !ok {
			return fmt.Errorf("packet mismatch %v", robj )
		}
		return fmt.Errorf("Not implemented %v", recved)
	}

	func bytesRecvRspFn_Login(me interface{}, hd gos_packet.Header, rbody []byte) error {
		robj, err := gos_json.UnmarshalPacket(hd, rbody)
		if err != nil {
			return  fmt.Errorf("Packet type miss match %v", rbody)
		}
		recved , ok := robj.(*gos_obj.RspLogin_data)
		if !ok {
			return fmt.Errorf("packet mismatch %v", robj )
		}
		return fmt.Errorf("Not implemented %v", recved)
	}

	func bytesRecvRspFn_Heartbeat(me interface{}, hd gos_packet.Header, rbody []byte) error {
		robj, err := gos_json.UnmarshalPacket(hd, rbody)
		if err != nil {
			return  fmt.Errorf("Packet type miss match %v", rbody)
		}
		recved , ok := robj.(*gos_obj.RspHeartbeat_data)
		if !ok {
			return fmt.Errorf("packet mismatch %v", robj )
		}
		return fmt.Errorf("Not implemented %v", recved)
	}

	func bytesRecvRspFn_MakeStage(me interface{}, hd gos_packet.Header, rbody []byte) error {
		robj, err := gos_json.UnmarshalPacket(hd, rbody)
		if err != nil {
			return  fmt.Errorf("Packet type miss match %v", rbody)
		}
		recved , ok := robj.(*gos_obj.RspMakeStage_data)
		if !ok {
			return fmt.Errorf("packet mismatch %v", robj )
		}
		return fmt.Errorf("Not implemented %v", recved)
	}

	func bytesRecvRspFn_EnterStage(me interface{}, hd gos_packet.Header, rbody []byte) error {
		robj, err := gos_json.UnmarshalPacket(hd, rbody)
		if err != nil {
			return  fmt.Errorf("Packet type miss match %v", rbody)
		}
		recved , ok := robj.(*gos_obj.RspEnterStage_data)
		if !ok {
			return fmt.Errorf("packet mismatch %v", robj )
		}
		return fmt.Errorf("Not implemented %v", recved)
	}

	func bytesRecvRspFn_ChatToStage(me interface{}, hd gos_packet.Header, rbody []byte) error {
		robj, err := gos_json.UnmarshalPacket(hd, rbody)
		if err != nil {
			return  fmt.Errorf("Packet type miss match %v", rbody)
		}
		recved , ok := robj.(*gos_obj.RspChatToStage_data)
		if !ok {
			return fmt.Errorf("packet mismatch %v", robj )
		}
		return fmt.Errorf("Not implemented %v", recved)
	}

	func bytesRecvRspFn_LeaveStage(me interface{}, hd gos_packet.Header, rbody []byte) error {
		robj, err := gos_json.UnmarshalPacket(hd, rbody)
		if err != nil {
			return  fmt.Errorf("Packet type miss match %v", rbody)
		}
		recved , ok := robj.(*gos_obj.RspLeaveStage_data)
		if !ok {
			return fmt.Errorf("packet mismatch %v", robj )
		}
		return fmt.Errorf("Not implemented %v", recved)
	}

*/
