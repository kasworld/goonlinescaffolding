// Code generated by "genprotocol -ver=68269c8bfeecd6e461aa862d64007f60a1aeccd64229d523ae7b99a446255112 -basedir=. -prefix=gos -statstype=int"

package gos_handlereq

/* obj base demux fn map template
	var DemuxReq2ObjAPIFnMap = [...]func(
		me interface{}, hd gos_packet.Header, robj interface{}) (
		gos_packet.Header, interface{}, error){
	gos_idcmd.Invalid: Req2ObjAPI_Invalid,
gos_idcmd.Login: Req2ObjAPI_Login,
gos_idcmd.Heartbeat: Req2ObjAPI_Heartbeat,
gos_idcmd.MakeStage: Req2ObjAPI_MakeStage,
gos_idcmd.EnterStage: Req2ObjAPI_EnterStage,
gos_idcmd.ChatToStage: Req2ObjAPI_ChatToStage,
gos_idcmd.LeaveStage: Req2ObjAPI_LeaveStage,

}   // DemuxReq2ObjAPIFnMap

	func Req2ObjAPI_Invalid(
		me interface{}, hd gos_packet.Header, robj interface{}) (
		gos_packet.Header, interface{},  error) {
		req, ok := robj.(*gos_obj.ReqInvalid_data)
		if !ok {
			return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
		}
		rhd, rsp, err := objAPIFn_ReqInvalid(me, hd, req)
		return rhd, rsp, err
	}
	func objAPIFn_ReqInvalid(
		me interface{}, hd gos_packet.Header, robj *gos_obj.ReqInvalid_data) (
		gos_packet.Header, *gos_obj.RspInvalid_data, error) {
		sendHeader := gos_packet.Header{
			ErrorCode : gos_error.None,
		}
		sendBody := &gos_obj.RspInvalid_data{
		}
		return sendHeader, sendBody, nil
	}

	func Req2ObjAPI_Login(
		me interface{}, hd gos_packet.Header, robj interface{}) (
		gos_packet.Header, interface{},  error) {
		req, ok := robj.(*gos_obj.ReqLogin_data)
		if !ok {
			return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
		}
		rhd, rsp, err := objAPIFn_ReqLogin(me, hd, req)
		return rhd, rsp, err
	}
	func objAPIFn_ReqLogin(
		me interface{}, hd gos_packet.Header, robj *gos_obj.ReqLogin_data) (
		gos_packet.Header, *gos_obj.RspLogin_data, error) {
		sendHeader := gos_packet.Header{
			ErrorCode : gos_error.None,
		}
		sendBody := &gos_obj.RspLogin_data{
		}
		return sendHeader, sendBody, nil
	}

	func Req2ObjAPI_Heartbeat(
		me interface{}, hd gos_packet.Header, robj interface{}) (
		gos_packet.Header, interface{},  error) {
		req, ok := robj.(*gos_obj.ReqHeartbeat_data)
		if !ok {
			return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
		}
		rhd, rsp, err := objAPIFn_ReqHeartbeat(me, hd, req)
		return rhd, rsp, err
	}
	func objAPIFn_ReqHeartbeat(
		me interface{}, hd gos_packet.Header, robj *gos_obj.ReqHeartbeat_data) (
		gos_packet.Header, *gos_obj.RspHeartbeat_data, error) {
		sendHeader := gos_packet.Header{
			ErrorCode : gos_error.None,
		}
		sendBody := &gos_obj.RspHeartbeat_data{
		}
		return sendHeader, sendBody, nil
	}

	func Req2ObjAPI_MakeStage(
		me interface{}, hd gos_packet.Header, robj interface{}) (
		gos_packet.Header, interface{},  error) {
		req, ok := robj.(*gos_obj.ReqMakeStage_data)
		if !ok {
			return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
		}
		rhd, rsp, err := objAPIFn_ReqMakeStage(me, hd, req)
		return rhd, rsp, err
	}
	func objAPIFn_ReqMakeStage(
		me interface{}, hd gos_packet.Header, robj *gos_obj.ReqMakeStage_data) (
		gos_packet.Header, *gos_obj.RspMakeStage_data, error) {
		sendHeader := gos_packet.Header{
			ErrorCode : gos_error.None,
		}
		sendBody := &gos_obj.RspMakeStage_data{
		}
		return sendHeader, sendBody, nil
	}

	func Req2ObjAPI_EnterStage(
		me interface{}, hd gos_packet.Header, robj interface{}) (
		gos_packet.Header, interface{},  error) {
		req, ok := robj.(*gos_obj.ReqEnterStage_data)
		if !ok {
			return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
		}
		rhd, rsp, err := objAPIFn_ReqEnterStage(me, hd, req)
		return rhd, rsp, err
	}
	func objAPIFn_ReqEnterStage(
		me interface{}, hd gos_packet.Header, robj *gos_obj.ReqEnterStage_data) (
		gos_packet.Header, *gos_obj.RspEnterStage_data, error) {
		sendHeader := gos_packet.Header{
			ErrorCode : gos_error.None,
		}
		sendBody := &gos_obj.RspEnterStage_data{
		}
		return sendHeader, sendBody, nil
	}

	func Req2ObjAPI_ChatToStage(
		me interface{}, hd gos_packet.Header, robj interface{}) (
		gos_packet.Header, interface{},  error) {
		req, ok := robj.(*gos_obj.ReqChatToStage_data)
		if !ok {
			return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
		}
		rhd, rsp, err := objAPIFn_ReqChatToStage(me, hd, req)
		return rhd, rsp, err
	}
	func objAPIFn_ReqChatToStage(
		me interface{}, hd gos_packet.Header, robj *gos_obj.ReqChatToStage_data) (
		gos_packet.Header, *gos_obj.RspChatToStage_data, error) {
		sendHeader := gos_packet.Header{
			ErrorCode : gos_error.None,
		}
		sendBody := &gos_obj.RspChatToStage_data{
		}
		return sendHeader, sendBody, nil
	}

	func Req2ObjAPI_LeaveStage(
		me interface{}, hd gos_packet.Header, robj interface{}) (
		gos_packet.Header, interface{},  error) {
		req, ok := robj.(*gos_obj.ReqLeaveStage_data)
		if !ok {
			return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
		}
		rhd, rsp, err := objAPIFn_ReqLeaveStage(me, hd, req)
		return rhd, rsp, err
	}
	func objAPIFn_ReqLeaveStage(
		me interface{}, hd gos_packet.Header, robj *gos_obj.ReqLeaveStage_data) (
		gos_packet.Header, *gos_obj.RspLeaveStage_data, error) {
		sendHeader := gos_packet.Header{
			ErrorCode : gos_error.None,
		}
		sendBody := &gos_obj.RspLeaveStage_data{
		}
		return sendHeader, sendBody, nil
	}

*/
