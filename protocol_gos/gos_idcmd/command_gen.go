// Code generated by "genprotocol -ver=ee0c2a9542c23df14c7723030f3c8ad53da871d9e014d150b2e62d1ce8399fde -basedir=. -prefix=gos -statstype=int"

package gos_idcmd

import "fmt"

type CommandID uint16 // use in packet header, DO NOT CHANGE
const (
	Invalid   CommandID = iota // not used, make empty packet error
	Login                      // make session with nickname and enter stage
	Heartbeat                  // prevent connection timeout
	Chat                       // chat to stage
	Act                        // send user action

	CommandID_Count int = iota
)

var _CommandID2string = [CommandID_Count][2]string{
	Invalid:   {"Invalid", "not used, make empty packet error"},
	Login:     {"Login", "make session with nickname and enter stage"},
	Heartbeat: {"Heartbeat", "prevent connection timeout"},
	Chat:      {"Chat", "chat to stage"},
	Act:       {"Act", "send user action"},
}

func (e CommandID) String() string {
	if e >= 0 && e < CommandID(CommandID_Count) {
		return _CommandID2string[e][0]
	}
	return fmt.Sprintf("CommandID%d", uint16(e))
}

func (e CommandID) CommentString() string {
	if e >= 0 && e < CommandID(CommandID_Count) {
		return _CommandID2string[e][1]
	}
	return ""
}

var _string2CommandID = map[string]CommandID{
	"Invalid":   Invalid,
	"Login":     Login,
	"Heartbeat": Heartbeat,
	"Chat":      Chat,
	"Act":       Act,
}

func String2CommandID(s string) (CommandID, bool) {
	v, b := _string2CommandID[s]
	return v, b
}
