// Code generated by "genprotocol -ver=ee0c2a9542c23df14c7723030f3c8ad53da871d9e014d150b2e62d1ce8399fde -basedir=. -prefix=gos -statstype=int"

package gos_idnoti

import "fmt"

type NotiID uint16 // use in packet header, DO NOT CHANGE
const (
	Invalid   NotiID = iota // not used, make empty packet error
	StageInfo               // for client display
	StageChat               // broadcasted chat

	NotiID_Count int = iota
)

var _NotiID2string = [NotiID_Count][2]string{
	Invalid:   {"Invalid", "not used, make empty packet error"},
	StageInfo: {"StageInfo", "for client display"},
	StageChat: {"StageChat", "broadcasted chat"},
}

func (e NotiID) String() string {
	if e >= 0 && e < NotiID(NotiID_Count) {
		return _NotiID2string[e][0]
	}
	return fmt.Sprintf("NotiID%d", uint16(e))
}
func (e NotiID) CommentString() string {
	if e >= 0 && e < NotiID(NotiID_Count) {
		return _NotiID2string[e][1]
	}
	return ""
}

var _string2NotiID = map[string]NotiID{
	"Invalid":   Invalid,
	"StageInfo": StageInfo,
	"StageChat": StageChat,
}

func String2NotiID(s string) (NotiID, bool) {
	v, b := _string2NotiID[s]
	return v, b
}
