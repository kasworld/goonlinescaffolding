// Code generated by "genprotocol -ver=68269c8bfeecd6e461aa862d64007f60a1aeccd64229d523ae7b99a446255112 -basedir=. -prefix=gos -statstype=int"

package gos_statapierror

import (
	"fmt"
	"html/template"
	"net/http"
	"sync"

	"github.com/kasworld/goonlinescaffolding/protocol_gos/gos_error"
	"github.com/kasworld/goonlinescaffolding/protocol_gos/gos_idcmd"
)

func (es *StatAPIError) String() string {
	return fmt.Sprintf(
		"StatAPIError[%v %v %v]",
		len(es.Stat),
		len(es.ECList),
		len(es.CmdList),
	)
}

type StatAPIError struct {
	mutex   sync.RWMutex
	Stat    [][]int
	ECList  []string
	CmdList []string
}

func New() *StatAPIError {
	es := &StatAPIError{
		Stat: make([][]int, gos_idcmd.CommandID_Count),
	}
	for i, _ := range es.Stat {
		es.Stat[i] = make([]int, gos_error.ErrorCode_Count)
	}
	es.ECList = make([]string, gos_error.ErrorCode_Count)
	for i, _ := range es.ECList {
		es.ECList[i] = fmt.Sprintf("%s", gos_error.ErrorCode(i).String())
	}
	es.CmdList = make([]string, gos_idcmd.CommandID_Count)
	for i, _ := range es.CmdList {
		es.CmdList[i] = fmt.Sprintf("%v", gos_idcmd.CommandID(i))
	}
	return es
}
func (es *StatAPIError) Inc(cmd gos_idcmd.CommandID, errorcode gos_error.ErrorCode) {
	es.mutex.Lock()
	defer es.mutex.Unlock()
	es.Stat[cmd][errorcode]++
}
func (es *StatAPIError) ToWeb(w http.ResponseWriter, r *http.Request) error {
	tplIndex, err := template.New("index").Parse(`
	<html><head><title>API Error stat Info</title></head><body>
	<table border=1 style="border-collapse:collapse;">
	<tr>
		<td></td>
		{{range $ft, $v := .ECList}}
			<th>{{$v}}</th>
		{{end}}
	</tr>
	{{range $cmd, $w := .Stat}}
		<tr>
			<td>{{index $.CmdList $cmd}}</td>
			{{range $ft, $v := $w}}
				<td>{{$v}}</td>
			{{end}}
		</tr>
	{{end}}
	<tr>
		<td></td>
		{{range $ft, $v := .ECList}}
			<th>{{$v}}</th>
		{{end}}
	</tr>
	</table><br/>
	</body></html>`)
	if err != nil {
		return err
	}
	if err := tplIndex.Execute(w, es); err != nil {
		return err
	}
	return nil
}
