// Code generated by "genprotocol.exe -ver=fa962a76ad7b14946f492eb8876e2f538e89415bc44d01f1655f1ad6b962a045 -basedir=protocol_gos -prefix=gos -statstype=int"

package gos_statserveapi

import (
	"fmt"
	"net/http"
	"sync"
	"text/template"
	"time"

	"github.com/kasworld/goonlinescaffolding/protocol_gos/gos_idcmd"
	"github.com/kasworld/goonlinescaffolding/protocol_gos/gos_packet"
)

func (ps *StatServeAPI) String() string {
	return fmt.Sprintf("StatServeAPI[%v]", len(ps))
}

type StatServeAPI [gos_idcmd.CommandID_Count]StatRow

func New() *StatServeAPI {
	ps := new(StatServeAPI)
	for i := 0; i < gos_idcmd.CommandID_Count; i++ {
		ps[i].Name = gos_idcmd.CommandID(i).String()
	}
	return ps
}
func (ps *StatServeAPI) AfterRecvReqHeader(header gos_packet.Header) (*StatObj, error) {
	if int(header.Cmd) >= gos_idcmd.CommandID_Count {
		return nil, fmt.Errorf("CommandID out of range %v %v", header, gos_idcmd.CommandID_Count)
	}
	return ps[header.Cmd].open(header), nil
}
func (ws *StatServeAPI) ToWeb(w http.ResponseWriter, r *http.Request) error {
	tplIndex, err := template.New("index").Parse(`
	<html><head><title>Serve API stat Info</title></head><body>
	<table border=1 style="border-collapse:collapse;">` +
		HTML_tableheader +
		`{{range $i, $v := .}}` +
		HTML_row +
		`{{end}}` +
		HTML_tableheader +
		`</table><br/>
	</body></html>`)
	if err != nil {
		return err
	}
	if err := tplIndex.Execute(w, ws); err != nil {
		return err
	}
	return nil
}

////////////////////////////////////////////////////////////////////////////////
type StatObj struct {
	RecvTime    time.Time
	APICallTime time.Time
	StatRef     *StatRow
}

func (sm *StatObj) BeforeAPICall() {
	sm.APICallTime = time.Now().UTC()
	sm.StatRef.afterAuth()
}
func (sm *StatObj) AfterAPICall() {
	sm.StatRef.apiEnd(time.Now().UTC().Sub(sm.APICallTime))
}
func (sm *StatObj) AfterSendRsp(hd gos_packet.Header) {
	sm.StatRef.afterSend(time.Now().UTC().Sub(sm.RecvTime), hd)
}

////////////////////////////////////////////////////////////////////////////////
type PacketID2StatObj struct {
	mutex sync.RWMutex
	stats map[uint32]*StatObj
}

func NewPacketID2StatObj() *PacketID2StatObj {
	return &PacketID2StatObj{
		stats: make(map[uint32]*StatObj),
	}
}
func (som *PacketID2StatObj) Add(pkid uint32, so *StatObj) error {
	som.mutex.Lock()
	defer som.mutex.Unlock()
	if _, exist := som.stats[pkid]; exist {
		return fmt.Errorf("pkid exist %v", pkid)
	}
	som.stats[pkid] = so
	return nil
}
func (som *PacketID2StatObj) Del(pkid uint32) *StatObj {
	som.mutex.Lock()
	defer som.mutex.Unlock()
	so := som.stats[pkid]
	delete(som.stats, pkid)
	return so
}
func (som *PacketID2StatObj) Get(pkid uint32) *StatObj {
	som.mutex.RLock()
	defer som.mutex.RUnlock()
	return som.stats[pkid]
}

////////////////////////////////////////////////////////////////////////////////
const (
	HTML_tableheader = `<tr>
	<th>Name</th>
	<th>Recv Count</th>
	<th>Auth Count</th>
	<th>APIEnd Count</th>
	<th>Send Count</th>
	<th>Run Count</th>
	<th>Fail Count</th>
	<th>RecvSend Avg ms</th>
	<th>API Avg ms</th>
	<th>Rx Avg Byte</th>
	<th>Rx Max Byte</th>
	<th>Tx Avg Byte</th>
	<th>Tx Max Byte</th>
	</tr>`
	HTML_row = `<tr>
	<td>{{$v.Name}}</td>
	<td>{{$v.RecvCount}}</td>
	<td>{{$v.AuthCount}}</td>
	<td>{{$v.APIEndCount}}</td>
	<td>{{$v.SendCount}}</td>
	<td>{{$v.RunCount}}</td>
	<td>{{$v.FailCount}}</td>
	<td>{{printf "%13.6f" $v.RSAvgms }}</td>
	<td>{{printf "%13.6f" $v.APIAvgms }}</td>
	<td>{{printf "%10.3f" $v.AvgRxByte }}</td>
	<td>{{$v.MaxRecvBytes }}</td>
	<td>{{printf "%10.3f" $v.AvgTxByte }}</td>
	<td>{{$v.MaxSendBytes }}</td>
	</tr>
	`
)

type StatRow struct {
	mutex          sync.Mutex
	Name           string
	RecvCount      int
	MaxRecvBytes   int
	RecvBytes      int
	SendCount      int
	MaxSendBytes   int
	SendBytes      int
	RecvSendDurSum time.Duration
	AuthCount      int
	APIEndCount    int
	APIDurSum      time.Duration
}

func (sr *StatRow) open(hd gos_packet.Header) *StatObj {
	sr.mutex.Lock()
	defer sr.mutex.Unlock()
	sr.RecvCount++
	rxbyte := int(hd.BodyLen()) + gos_packet.HeaderLen
	sr.RecvBytes += rxbyte
	if sr.MaxRecvBytes < rxbyte {
		sr.MaxRecvBytes = rxbyte
	}
	rtn := &StatObj{
		RecvTime: time.Now().UTC(),
		StatRef:  sr,
	}
	return rtn
}
func (sr *StatRow) afterAuth() {
	sr.mutex.Lock()
	defer sr.mutex.Unlock()
	sr.AuthCount++
}
func (sr *StatRow) apiEnd(diffDur time.Duration) {
	sr.mutex.Lock()
	defer sr.mutex.Unlock()
	sr.APIEndCount++
	sr.APIDurSum += diffDur
}
func (sr *StatRow) afterSend(diffDur time.Duration, hd gos_packet.Header) {
	sr.mutex.Lock()
	defer sr.mutex.Unlock()
	sr.SendCount++
	txbyte := int(hd.BodyLen()) + gos_packet.HeaderLen
	sr.SendBytes += txbyte
	if sr.MaxSendBytes < txbyte {
		sr.MaxSendBytes = txbyte
	}
	sr.RecvSendDurSum += diffDur
}

////////////////////////////////////////////////////////////////////////////////
func (sr *StatRow) RunCount() int {
	return sr.AuthCount - sr.APIEndCount
}
func (sr *StatRow) FailCount() int {
	return sr.APIEndCount - sr.SendCount
}
func (sr *StatRow) RSAvgms() float64 {
	if sr.SendCount == 0 {
		return 0
	}
	return float64(sr.RecvSendDurSum) / float64(sr.SendCount*1000000)
}
func (sr *StatRow) APIAvgms() float64 {
	if sr.APIEndCount == 0 {
		return 0
	}
	return float64(sr.APIDurSum) / float64(sr.APIEndCount*1000000)
}
func (sr *StatRow) AvgRxByte() float64 {
	if sr.RecvCount == 0 {
		return 0
	}
	return float64(sr.RecvBytes) / float64(sr.RecvCount)
}
func (sr *StatRow) AvgTxByte() float64 {
	if sr.SendCount == 0 {
		return 0
	}
	return float64(sr.SendBytes) / float64(sr.SendCount)
}
