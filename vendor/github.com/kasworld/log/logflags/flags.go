// Copyright 2015,2016,2017,2018,2019 SeukWon Kang (kasworld@gmail.com)
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//    http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// python like log package
// can use instead of standard log package

package logflags

import (
	"bytes"
	"fmt"
	"runtime"
	"time"

	"github.com/kasworld/log/logflagi"
)

//go:generate stringer -type=LF_Type
type LF_Type int

// These flags define which text to prefix to each log entry generated by the Logger.
const (
	// Bits or'ed together to control what's printed.
	// There is no control over the order they appear (the order listed
	// here) or the format they present (as described in the comments).
	// The prefix is followed by a colon only when Llongfile or Lshortfile
	// is specified.
	// For example, flags Ldate | Ltime (or LstdFlags) produce,
	//	2009/01/23 01:23:23 message
	// while flags Ldate | Ltime | Lmicroseconds | Llongfile produce,
	//	2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message
	LF_date         LF_Type = 1 << iota // the date in the local time zone: 2009/01/23
	LF_time                             // the time in the local time zone: 01:23:23
	LF_microseconds                     // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	LF_longfile                         // full file name and line number: /a/b/c/d.go:23
	LF_shortfile                        // final file name element and line number: d.go:23. overrides Llongfile
	LF_functionname
	LF_prefix
	LF_UTC // if Ldate or Ltime is set, use UTC rather than the local time zone
	LF_END
	LF_stdFlags = LF_date | LF_time // initial values for the standard logger
)

func DefaultValue(release bool) LF_Type {
	flags := LF_stdFlags
	if !release {
		flags |= LF_date | LF_time | LF_shortfile // | LF_functionname
	}
	if release {
		flags |= LF_UTC
	}
	return flags
}

func (lf LF_Type) BitAnd(lf2 logflagi.LogFlagI) logflagi.LogFlagI {
	return lf & lf2.(LF_Type)
}

func (lf LF_Type) BitOr(lf2 logflagi.LogFlagI) logflagi.LogFlagI {
	return lf | lf2.(LF_Type)
}

func (lf LF_Type) BitNeg(lf2 logflagi.LogFlagI) logflagi.LogFlagI {
	return lf ^ lf2.(LF_Type)
}

func (lf LF_Type) BitClear(lf2 logflagi.LogFlagI) logflagi.LogFlagI {
	return lf &^ lf2.(LF_Type)
}

func (lf LF_Type) BitTest(lf2 logflagi.LogFlagI) bool {
	return lf&lf2.(LF_Type) != 0
}

func (lf LF_Type) FlagString() string {
	var buff bytes.Buffer
	buff.WriteString("LogFlag[")
	for i := LF_Type(1); i < LF_END; i <<= 1 {
		if lf&i != 0 {
			fmt.Fprintf(&buff, "%s ", i)
		}
	}
	buff.WriteString("]")
	return buff.String()
}

//// Cheap integer to fixed-width decimal ASCII.  Give a negative width to avoid zero-padding.
func itoa(buf *[]byte, i int, wid int) {
	// Assemble decimal in reverse order.
	var b [20]byte
	bp := len(b) - 1
	for i >= 10 || wid > 1 {
		wid--
		q := i / 10
		b[bp] = byte('0' + i - q*10)
		bp--
		i = q
	}
	// i < 10
	b[bp] = byte('0' + i)
	*buf = append(*buf, b[bp:]...)
}

func (logflag LF_Type) FormatHeader(
	buf *[]byte,
	calldepth int,
	now time.Time,
	prefix string, llinfo string) {

	// now := time.Now() // get this early.
	var file string
	var fnname string
	var line int
	var pc uintptr
	if logflag&(LF_shortfile|LF_longfile|LF_functionname) != 0 {
		// release lock while getting caller info - it's expensive.
		var ok bool
		pc, file, line, ok = runtime.Caller(calldepth)
		if !ok {
			file = "???"
			line = 0
			fnname = "???"
		} else if logflag&LF_functionname != 0 {
			fn := runtime.FuncForPC(pc)
			fnname = fn.Name()
		}
	}

	if logflag&LF_prefix != 0 {
		*buf = append(*buf, prefix...)
		*buf = append(*buf, ' ')
	}
	*buf = append(*buf, llinfo...)
	*buf = append(*buf, ' ')
	if logflag&LF_UTC != 0 {
		now = now.UTC()
	}
	if logflag&(LF_date|LF_time|LF_microseconds) != 0 {
		if logflag&LF_date != 0 {
			year, month, day := now.Date()
			itoa(buf, year, 4)
			*buf = append(*buf, '/')
			itoa(buf, int(month), 2)
			*buf = append(*buf, '/')
			itoa(buf, day, 2)
			*buf = append(*buf, ' ')
		}
		if logflag&(LF_time|LF_microseconds) != 0 {
			hour, min, sec := now.Clock()
			itoa(buf, hour, 2)
			*buf = append(*buf, ':')
			itoa(buf, min, 2)
			*buf = append(*buf, ':')
			itoa(buf, sec, 2)
			if logflag&LF_microseconds != 0 {
				*buf = append(*buf, '.')
				itoa(buf, now.Nanosecond()/1e3, 6)
			}
			*buf = append(*buf, ' ')
		}
	}
	if logflag&(LF_shortfile|LF_longfile) != 0 {
		if logflag&LF_shortfile != 0 {
			short := file
			for i := len(file) - 1; i > 0; i-- {
				if file[i] == '/' {
					short = file[i+1:]
					break
				}
			}
			file = short
		}
		*buf = append(*buf, file...)
		*buf = append(*buf, ':')
		itoa(buf, line, -1)
		if logflag&(LF_functionname) != 0 {
			*buf = append(*buf, ':')
			*buf = append(*buf, fnname...)
		}
		*buf = append(*buf, ": "...)
	}
}

func (logflag LF_Type) ParseHeader(buf []byte) (
	prefix string, llinfo string,
	datestr string, timestr string,
	filestr string,
	remainbuf []byte) {

	remainbuf = buf

	if logflag&LF_prefix != 0 {
		split := bytes.SplitN(remainbuf, []byte{' '}, 2)
		prefix = string(split[0])
		remainbuf = split[1]
	}

	split := bytes.SplitN(remainbuf, []byte{' '}, 2)
	llinfo = string(split[0])
	remainbuf = split[1]

	if logflag&(LF_date|LF_time|LF_microseconds) != 0 {
		if logflag&LF_date != 0 {
			split := bytes.SplitN(remainbuf, []byte{' '}, 2)
			datestr = string(split[0])
			remainbuf = split[1]
		}
		if logflag&(LF_time|LF_microseconds) != 0 {
			split := bytes.SplitN(remainbuf, []byte{' '}, 2)
			timestr = string(split[0])
			remainbuf = split[1]
			if logflag&LF_microseconds != 0 {
			}
		}
	}
	if logflag&(LF_shortfile|LF_longfile) != 0 {
		split := bytes.SplitN(remainbuf, []byte{' '}, 2)
		filestr = string(split[0])
		remainbuf = split[1]
	}
	return
}
